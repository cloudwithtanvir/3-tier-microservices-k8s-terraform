name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Run Linter
      run: |
        # Example of linting for JavaScript/React projects
        cd frontend
        npm install
        npm run lint
        cd ..
        # Lint Python services
        pip install flake8
        flake8 notification-service transaction-service user-service
      continue-on-error: true  # Skip testing if linting fails

    - name: Run Tests
      run: |
        # Example: Running frontend tests (adjust based on your test framework)
        cd frontend
        npm test -- --watchAll=false
        cd ..
        # Example: Running tests for backend services with pytest
        pip install pytest
        pytest notification-service transaction-service user-service
      if: success()  # Only run if previous steps were successful

    - name: Log in to GCP Container Registry
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Build Docker Images
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/notification-service:latest ./notification-service
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/transaction-service:latest ./transaction-service
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest ./user-service
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest ./frontend

    - name: Push Docker Images
      run: |
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/notification-service:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/transaction-service:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest
